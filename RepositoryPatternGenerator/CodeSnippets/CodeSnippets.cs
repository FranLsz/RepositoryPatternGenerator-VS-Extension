using System.Collections.Generic;
using System.Linq;

namespace RepositoryPatternGenerator.CodeSnippets
{
    public class CodeSnippets
    {
        private const string Header = @"/*
The next code was generated by Repository Pattern Generator.
Be free to modify this file.

This extension was developed and designed by Francisco López Sánchez.
*/
";
        public static string RepositoryName = "Repository";
        public static string ModelsName = "Models";

        public static string GenerateClassViewModel(string className, Dictionary<string, string> properties, List<string> keys)
        {
            var propsString = "";
            var toDataBaseString = "";
            var fromDataBaseString = "";
            var updateDataBaseString = "";
            var keysString = "";

            foreach (var p in properties.Select((Entry, Index) => new { Entry, Index }))
            {
                propsString += "        public " + p.Entry.Value + " " + p.Entry.Key + " { get; set; }";
                fromDataBaseString += "            " + p.Entry.Key + " = model." + p.Entry.Key + ";";
                updateDataBaseString += "            model." + p.Entry.Key + " = " + p.Entry.Key + ";";
                toDataBaseString += "                " + p.Entry.Key + " = " + p.Entry.Key;
                if (p.Index + 1 < properties.Count)
                {
                    propsString += "\r\n";
                    toDataBaseString += ",\r\n";
                    fromDataBaseString += "\r\n";
                    updateDataBaseString += "\r\n";
                }
            }

            foreach (var k in keys.Select((Entry, Index) => new { Entry, Index }))
            {
                keysString += k.Entry;
                if (k.Index + 1 < keys.Count)
                    keysString += ",";
            }

            var classViewModel =
@"" + Header + @"
using " + RepositoryName + "." + ModelsName + @";
using System;

namespace " + RepositoryName + @".ViewModels
{
    public class " + className + @"ViewModel : IViewModel<" + className + @">
    {
" + propsString + @"

        public " + className + @" ToDataBase()
        {
            return new " + className + @"()
            {
" + toDataBaseString + @"
            };
        }

        public void FromDataBase(" + className + @" model)
        {
" + fromDataBaseString + @"
        }

        public void UpdateDataBase(" + className + @" model)
        {
" + updateDataBaseString + @"
        }

        public object[] GetKeys()
        {
            return new object[] { " + keysString + @" };
        }
    }
}";

            return classViewModel;
        }
        public static string GetIRepository()
        {
            return @"" + Header + @"
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using " + RepositoryName + @".ViewModels;

namespace " + RepositoryName + @".Repository
{
    public interface IRepository<TModel, TViewModel> where TModel : class where TViewModel : IViewModel<TModel>
    {
        ICollection<TViewModel> Get();
        TViewModel Get(params object[] keys);
        ICollection<TViewModel> Get(Expression<Func<TModel, bool>> where, int? skip = null, int? take = null, Expression<Func<TModel, object>> orderBy = null, bool? orderAsc = null);
        int Count(Expression<Func<TModel, bool>> where = null);        
        TViewModel Add(TViewModel model);
        int Update(TViewModel model);
        int Delete(params object[] keys);
        int Delete(Expression<Func<TModel, bool>> where);
    }
}";
        }

        public static string GetIViewModel()
        {
            return @"" + Header + @"
namespace " + RepositoryName + @".ViewModels
{
    public interface IViewModel<TModel> where TModel : class
        {
            TModel ToDataBase();
            void FromDataBase(TModel model);
            void UpdateDataBase(TModel model);
            object[] GetKeys();
        }
}";
        }

        public static string GetEntityRepository()
        {
            return @"" + Header + @"
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using " + RepositoryName + @".ViewModels;

namespace " + RepositoryName + @".Repository
{
    public class EntityRepository<TModel, TViewModel> : IRepository<TModel, TViewModel> where TModel : class where TViewModel : IViewModel<TModel>, new()
    {
        private readonly DbContext _context;

        protected virtual DbSet<TModel> DbSet
        {
            get
            {
                return _context.Set<TModel>();
            }
        }

        public EntityRepository(DbContext context)
        {
            this._context = context;
        }

        public virtual ICollection<TViewModel> Get()
        {
            var list = new List<TViewModel>();
            foreach (var model in DbSet)
            {
                var vm = new TViewModel();
                vm.FromDataBase(model);
                list.Add(vm);
            }

            return list;
        }

        public virtual TViewModel Get(params object[] keys)
        {
            var data = DbSet.Find(keys);
            if (data == null)
                return default(TViewModel);

            var vm = new TViewModel();
            vm.FromDataBase(data);

            return vm;
        }

        public virtual ICollection<TViewModel> Get(Expression<Func<TModel, bool>> where, int? skip, int? take, Expression<Func<TModel, object>> orderBy = null, bool? orderAsc = null)
        {
            var data = new List<TViewModel>();
            var query = DbSet.Where(where);

            if (orderBy != null && orderAsc == null)
                query = query.OrderBy(orderBy).AsQueryable();
            else if (orderBy != null && orderAsc.Value)
                query = query.OrderBy(orderBy).AsQueryable();
            else if (orderBy != null)
                query = query.OrderByDescending(orderBy).AsQueryable();

            if (skip != null)
                query = query.Skip(skip.Value);

            if (take != null)
                query = query.Take(take.Value);

            foreach (var model in query)
            {
                var obj = new TViewModel();
                obj.FromDataBase(model);
                data.Add(obj);
            }

            return data;
        }

        public virtual int Count(Expression<Func<TModel, bool>> where = null)
        {
            return where != null ? DbSet.Where(where).Count() : DbSet.Count();
        }

        public virtual TViewModel Add(TViewModel model)
        {
            var m = model.ToDataBase();
            var addedModel = DbSet.Add(m);
            try
            {
                _context.SaveChanges();
                model.FromDataBase(addedModel);
                return model;
            }
            catch (Exception)
            {
                return default(TViewModel);
            }
        }

        public virtual int Update(TViewModel model)
        {
            var obj = DbSet.Find(model.GetKeys());
            model.UpdateDataBase(obj);
            try
            {
                return _context.SaveChanges();
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public virtual int Delete(Expression<Func<TModel, bool>> where)
        {
            var data = DbSet.Where(where);
            DbSet.RemoveRange(data);
            try
            {
                return _context.SaveChanges();
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public virtual int Delete(params object[] keys)
        {
            var data = DbSet.Find(keys);
            DbSet.Remove(data);
            try
            {
                return _context.SaveChanges();
            }
            catch (Exception)
            {
                return 0;
            }
        }
    }
}";
        }

    }
}
