using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using RepositoryPatternGenerator.Helpers;

namespace RepositoryPatternGenerator.CodeSnippets
{
    public class CodeSnippetsV2
    {
        private const string Header = @"/*
The next code was generated by Repository Pattern Generator.
Be free to modify this file.

This extension was developed and designed by Francisco López Sánchez.
*/
";
        public static string RepositoryName = "Repository";
        public static string ModelsName = "Models";
        public static string ViewModelsProjectName = "DataModel";

        public static string GetViewModel(string modelName, Dictionary<string, string> modelProps)
        {
            var props = modelProps.Aggregate("", (current, mp) => current + $"        public {mp.Value} {mp.Key} {{ get; set; }}\r\n");

            var code = @"" + Header + @"
using System;

namespace " + ViewModelsProjectName + @".ViewModel
{
    public class " + modelName + @"ViewModel
    {
" + props + @"
    }
}
";
            return code;
        }

        public static string GetModelAdapter(string modelName, List<string> modelProps)
        {
            var fromProps = modelProps.Aggregate("", (current, mp) => current + $"                {mp} = model.{mp},\r\n");
            fromProps = Utils.ReplaceLastOccurrence(fromProps, ",\r\n", "");

            var code = @"" + Header + @"
using " + RepositoryName + @".Model;
using " + ViewModelsProjectName + @".ViewModel;

namespace " + RepositoryName + @".Adapter
{
    public class " + modelName + @"Adapter : Adapter<" + modelName + @", " + modelName + @"ViewModel>
    {
        public override " + modelName + @" FromViewModel(" + modelName + @"ViewModel model)
        {
            return new " + modelName + @"()
            {
" + fromProps + @"
            };
        }

        public override " + modelName + @"ViewModel FromModel(" + modelName + @" model)
        {
            return new " + modelName + @"ViewModel()
            {
" + fromProps + @"
            };
        }
    }
}
";
            return code;
        }

        public static string GetIAdapter()
        {
            return @"" + Header + @"
using System.Collections.Generic;

namespace " + RepositoryName + @".Adapter
{
    public interface IAdapter<TModel, TViewModel>
    {
        TModel FromViewModel(TViewModel model);
        TViewModel FromModel(TModel model);
        ICollection<TModel> FromViewModel(ICollection<TViewModel> model);
        ICollection<TViewModel> FromModel(ICollection<TModel> model);
    }
}";
        }
        public static string GetAdapter()
        {
            return @"" + Header + @"
using System.Collections.Generic;
using System.Linq;

namespace " + RepositoryName + @".Adapter
{
    public abstract class Adapter<TModel, TViewModel> : IAdapter<TModel, TViewModel>
    {
        public abstract TModel FromViewModel(TViewModel model);
        public abstract TViewModel FromModel(TModel model);

        public ICollection<TModel> FromViewModel(ICollection<TViewModel> model)
        {
            return model.Select(FromViewModel).ToList();
        }

        public ICollection<TViewModel> FromModel(ICollection<TModel> model)
        {
            return model.Select(FromModel).ToList();
        }
    }
}";
        }

        public static string GetIRepository()
        {
            return @"" + Header + @"
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace " + RepositoryName + @".Repository
{
    public interface IRepository<TModel, TViewModel, TAdapter>
    {
        ICollection<TViewModel> Get();
        TViewModel Get(params object[] keys);
        ICollection<TViewModel> Get(Expression<Func<TModel, bool>> where);
        TViewModel Add(TViewModel model);
        int Update(TViewModel model);
        int Delete(params object[] keys);
        int Delete(TViewModel model);
        int Delete(Expression<Func<TModel, bool>> where);
    }
}";
        }

        public static string GetEntityFrameworkRepository()
        {
            return @"" + Header + @"
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using " + RepositoryName + @".Adapter;

namespace " + RepositoryName + @".Repository
{
    public class EntityFrameworkRepository<TModel, TViewModel, TAdapter> : IRepository<TModel, TViewModel, TAdapter>
        where TAdapter : IAdapter<TModel, TViewModel>, new()
        where TModel : class
        where TViewModel : class
    {
        protected DbContext Context;

        protected DbSet<TModel> DbSet => Context.Set<TModel>();

        public TAdapter Adapter
        {
            get
            {
                if (_adapter == null)
                    _adapter = new TAdapter();
                return _adapter;
            }
        }
        private TAdapter _adapter;

        public EntityFrameworkRepository(DbContext context)
        {
            Context = context;
        }

        public virtual ICollection<TViewModel> Get()
        {
            return Adapter.FromModel(DbSet.ToList());
        }

        public virtual TViewModel Get(params object[] keys)
        {
            var data = DbSet.Find(keys);
            return Adapter.FromModel(data);
        }

        public virtual ICollection<TViewModel> Get(Expression<Func<TModel, bool>> where)
        {
            var data = DbSet.Where(where);
            return Adapter.FromModel(data.ToList());
        }

        public virtual TViewModel Add(TViewModel model)
        {
            var data = Adapter.FromViewModel(model);
            DbSet.Add(data);
            try
            {
                Context.SaveChanges();
                return Adapter.FromModel(data);
            }
            catch (Exception)
            {
                return null;
            }
        }

        public virtual int Update(TViewModel model)
        {
            var data = Adapter.FromViewModel(model);
            Context.Entry(data).State = EntityState.Modified;
            try
            {
                return Context.SaveChanges();
            }
            catch (Exception)
            {
                return -1;
            }
        }

        public virtual int Delete(params object[] keys)
        {
            var data = DbSet.Find(keys);
            DbSet.Remove(data);
            try
            {
                return Context.SaveChanges();
            }
            catch (Exception)
            {
                return -1;
            }
        }

        public virtual int Delete(TViewModel model)
        {
            var data = Adapter.FromViewModel(model);
            Context.Entry(data).State = EntityState.Deleted;
            try
            {
                return Context.SaveChanges();
            }
            catch (Exception)
            {
                return -1;
            }
        }

        public virtual int Delete(Expression<Func<TModel, bool>> where)
        {
            var data = DbSet.Where(where);
            DbSet.RemoveRange(data);
            try
            {
                return Context.SaveChanges();
            }
            catch (Exception)
            {
                return -1;
            }
        }
    }
}";
        }
    }
}